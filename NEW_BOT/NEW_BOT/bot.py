import os
import logging
import json
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ContentType
from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker
from models import Habit, Base, UserSettings  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ models.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
import sys

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEBAPP_URL = "https://habbites-broker.amvera.io/"
TIMEZONE = "Europe/Moscow"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(os.getenv("TOKEN"))
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=timezone(TIMEZONE))
engine = create_engine("sqlite:///habits.db")
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(user_id: int, habit_id: int):
    session = Session()
    try:
        habit = session.get(Habit, habit_id)
        if habit and habit.enabled:
            user_settings = session.query(UserSettings).filter_by(user_id=str(user_id)).first()
            if user_settings and not user_settings.notifications_enabled:
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{habit_id}")
            kb.button(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω", callback_data=f"snooze_{habit_id}")

            await bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit.name}",
                reply_markup=kb.as_markup()
            )
            logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ {habit.name}")
        else:
            logging.warning(f"–ü—Ä–∏–≤—ã—á–∫–∞ {habit_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    finally:
        session.close()

# –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
async def schedule_habits(user_id: str):
    session = Session()
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in scheduler.get_jobs():
            if job.id.startswith(f"habit_{user_id}_"):
                job.remove()

        habits = session.query(Habit).filter(
            Habit.user_id == user_id,
            Habit.enabled == True
        ).all()

        for habit in habits:
            dt = datetime.datetime.combine(datetime.date.today(), habit.time)
            aware_dt = timezone(TIMEZONE).localize(dt)

            scheduler.add_job(
                send_reminder,
                'cron',
                hour=aware_dt.hour,
                minute=aware_dt.minute,
                args=[int(user_id), habit.id],
                id=f"habit_{user_id}_{habit.id}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                replace_existing=True
            )
            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {habit.name} –≤ {aware_dt}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
    finally:
        session.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    session = Session()
    try:
        if not session.query(UserSettings).filter_by(user_id=user_id).first():
            session.add(UserSettings(user_id=user_id))
            session.commit()

        builder = ReplyKeyboardBuilder()
        builder.add(types.KeyboardButton(
            text="üìä –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏",
            web_app=types.WebAppInfo(url=WEBAPP_URL)
        ))
        builder.add(types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))

        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏.\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–µ—Ä:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

        await schedule_habits(user_id)
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: types.Message):
    user_id = str(message.from_user.id)
    session = Session()
    try:
        settings = session.query(UserSettings).filter_by(user_id=user_id).first()

        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if settings.notifications_enabled else '–í—ã–∫–ª'}",
            callback_data="toggle_notifications"
        )
        builder.button(
            text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            callback_data="change_timezone"
        )
        builder.adjust(1)

        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–∏–≤—ã—á–µ–∫:",
            reply_markup=builder.as_markup()
        )
    finally:
        session.close()

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    session = Session()
    try:
        settings = session.query(UserSettings).filter_by(user_id=user_id).first()
        settings.notifications_enabled = not settings.notifications_enabled
        session.commit()

        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if settings.notifications_enabled else '–í—ã–∫–ª'}",
            callback_data="toggle_notifications"
        )
        builder.button(
            text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            callback_data="change_timezone"
        )
        builder.adjust(1)

        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if settings.notifications_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    finally:
        session.close()

# –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
@dp.callback_query(F.data.startswith("done_"))
async def mark_as_done(callback: types.CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    user_id = str(callback.from_user.id)
    session = Session()
    try:
        habit = session.get(Habit, habit_id)
        if habit:
            habit.completed_count += 1
            habit.last_completed = datetime.datetime.now()
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Web App
            updated_habit = {
                "id": habit.id,
                "name": habit.name,
                "time": habit.time.strftime("%H:%M"),
                "progress": habit.completed_count
            }
            await bot.send_message(
                chat_id=user_id,
                text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏",
                message_effect_id="5104841194236834049",  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[]),  # –ü—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                web_app_data=types.WebAppData(data=json.dumps({"type": "habit_update", "habit": updated_habit}))
            )

            await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
            await callback.message.delete()
    finally:
        session.close()

# –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@dp.callback_query(F.data.startswith("snooze_"))
async def snooze_reminder(callback: types.CallbackQuery):
    habit_id = int(callback.data.split("_")[1])
    user_id = str(callback.from_user.id)

    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 15 –º–∏–Ω—É—Ç")
    await callback.message.delete()

    scheduler.add_job(
        send_reminder,
        'date',
        run_date=datetime.datetime.now() + datetime.timedelta(minutes=15),
        args=[int(user_id), habit_id],
        id=f"snoozed_{habit_id}_{user_id}_{datetime.datetime.now().timestamp()}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@dp.message(lambda message: message.content_type == ContentType.WEB_APP_DATA)
async def handle_web_app_data(message: types.Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {message.web_app_data.data}")
    user_id = str(message.from_user.id)
    session = Session()
    try:
        data = json.loads(message.web_app_data.data)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.query(Habit).filter(Habit.user_id == user_id).delete()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
        for habit_data in data:
            habit = Habit(
                user_id=user_id,
                name=habit_data["name"],
                time=datetime.datetime.strptime(habit_data["time"], "%H:%M").time(),
                enabled=True
            )
            session.add(habit)

        session.commit()
        await message.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–æ–≤—Ä–µ–º—è :)")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await schedule_habits(user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫.")
    finally:
        session.close()

# –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
async def on_startup():
    if not scheduler.running:
        scheduler.start()
        logging.info("Scheduler started")

async def on_shutdown():
    if scheduler.running:
        scheduler.shutdown()
        logging.info("Scheduler stopped")

async def main():
    await on_startup()
    await dp.start_polling(bot)
    await on_shutdown()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())